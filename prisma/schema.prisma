// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String        @default("")
  lastName    String        @default("")
  email       String        @unique
  password    String
  address     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // Shop      Shop[] 
  Cart        Cart[]
  OrderMaster OrderMaster[]
}

model Shop {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @default("")
  domain      String   @unique
  accessToken String   @unique
  scope       String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model Product {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @default("")
  price       String
  description String        @default("")
  points      String[]
  image       String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Cart        Cart[]
  OrderMaster OrderMaster[]

  order order[]
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model OrderMaster {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   user        User     @relation(fields: [userId], references: [id])
//   userId      String   @db.ObjectId
//   product     Product  @relation(fields: [productId], references: [id])
//   productId   String   @db.ObjectId
//   quantity    Int
//   mobile      String
//   email       String
//   address     String
//   paymentType Int
//   orderStatus Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model OrderMaster {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  user        User     @relation(fields: [userId], references: [id])
  orderId     Int
  userId      String   @db.ObjectId
  orders      order[]  @relation("OrderMasterOrders")
  address     String
  mobile      String
  email       String
  paymentType Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?  @db.ObjectId
}

model order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  product       Product     @relation(fields: [productId], references: [id])
  productId     String      @db.ObjectId
  quantity      Int
  orderStatus   Int
  orderMaster   OrderMaster @relation("OrderMasterOrders", fields: [orderMasterId], references: [id])
  orderMasterId String      @db.ObjectId
  isActive      Boolean     @default(true)
}
